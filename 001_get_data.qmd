---
title: "Download the data"
---

The purpose of this notebook is to download occurrences from GBIF, as well as the predictors from WorldClim2. Everything is then saved to either a stacked geotiff (layers for visualisation) or to a `JLD` serialized object (raw data for future steps in the pipeline).

## Loading the required package

```{julia}
include(joinpath("code", "pkg.jl"))
```

## Bioclimatic data

get the data from worldclim2 and clip

```{julia}
provider = RasterData(WorldClim2, BioClim)
opts = (resolution=2.5, )
boundingbox = (bottom=42.0, right=-70.0, left=-82.5, top=47.5)
temperature = SimpleSDMPredictor(provider, layer=1; opts..., boundingbox...)
```

```{julia}
fig = Figure(; resolution=(900, 500))
ax = Axis(fig[1,1]; xlabel="Longitude", ylabel="Latitude", aspect=DataAspect())
hm = heatmap!(ax, temperature, colormap=Reverse(:dense))
Colorbar(fig[1,2], hm; tellheight=false)
current_figure()
```

## Getting occurrence data

get some GBIF data

```{julia}
Hlac = taxon("Polyommatus icarus"; strict=false)
query = [
    "occurrenceStatus" => "PRESENT",
    "hasCoordinate" => true,
    "decimalLatitude" => (boundingbox.bottom, boundingbox.top),
    "decimalLongitude" => (boundingbox.left, boundingbox.right),
    "limit" => 300,
]
observations = occurrences(Hlac, query...)
```

get a few more pages of observations

```{julia}
for _ in 1:8
    occurrences!(observations)
end
```

get the plot all nice

```{julia}
scatter!(ax, observations; color=:black)
current_figure()
```

we add a phylopic image because we *can*

```{julia}
#=
phylopic_uuid = Phylopic.imagesof(Hlac; items = 1)
silhouette = phylopic_uuid |>
    Phylopic.thumbnail |>
    Downloads.download |>
    Images.load

@info Phylopic.attribution(phylopic_uuid)

silhouette_size = Vec2f(reverse(size(silhouette) ./ 2))

scatter!(ax, [-58], [35.0]; marker = silhouette, markersize = silhouette_size)
current_figure()
=#
```

## Selection of background points

we perform some spatial thinning, by making sure that there is only one observation per grid cell

```{julia}
presence_layer = mask(temperature, observations, Bool)
```

we make a buffer for pseudo-absences -- we will sample in circles around known presences, but keep a 100km buffer with no background points

```{julia}
background = pseudoabsencemask(WithinRadius, presence_layer; distance = 200.0)
buffer = pseudoabsencemask(WithinRadius, presence_layer; distance = 50.0)
possible_background = background-buffer
```

we get the pseudo-absences now, by sampling an equal number of background points

```{julia}
absence_layer = SpeciesDistributionToolkit.sample(possible_background, sum(presence_layer))
```

we remove the info we do not need from the layers

```{julia}
replace!(absence_layer, false => nothing)
replace!(presence_layer, false => nothing)
```

## Saving data to disk

now we need to get the full series of layers for the suite of bioclim variables

```{julia}
bioclim_clipped = [SimpleSDMPredictor(provider; layer = l, opts..., boundingbox...) for l in layers(provider)]
SpeciesDistributionToolkit._write_geotiff("artifacts/layers.tiff", bioclim_clipped)
```

now we bring everything into a single matrix

```{julia}
Xpresence = hcat([bioclim_var[keys(presence_layer)] for bioclim_var in bioclim_clipped]...)
ypresence = fill(true, length(presence_layer))
Xabsence = hcat([bioclim_var[keys(absence_layer)] for bioclim_var in bioclim_clipped]...)
yabsence = fill(false, length(absence_layer))
X = vcat(Xpresence, Xabsence)
y = vcat(ypresence, yabsence)
```

and we save as a JLD file

```{julia}
JLD.@save "artifacts/data.jld" X y
```