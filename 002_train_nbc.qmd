---
title: Initial training of the NBC
---

```{julia}
include(joinpath("code", "pkg.jl"))
include(joinpath("code", "nbc.jl"))
include(joinpath("code", "splitters.jl"))
include(joinpath("code", "confusion.jl"))
```

we train a nbc on a pair of variables (1, 12)

```{julia}
data = JLD.load("artifacts/data.jld")
y, X = data["y"], data["X"][:,[1,12]]
```

next up we split the data in two

```{julia}
idx, tidx = holdout(y, X)
```

initial model

```{julia}
model1 = naivebayes(y[idx], X[idx,:])
prediction = vec(mapslices(model1, X[tidx,:]; dims=2))
ConfusionMatrix(prediction, y[tidx]) |> trueskill
```

we make a map

```{julia}
predictors = [SpeciesDistributionToolkit._read_geotiff("artifacts/layers.tiff", SimpleSDMResponse; bandnumber=i) for i in [1,12]]
prediction = similar(first(predictors))
Threads.@threads for k in keys(prediction)
    prediction[k] = model1([p[k] for p in predictors])
end
```

map the prediction

```{julia}
fig = Figure(; resolution=(900, 400))
ax = Axis(fig[1,1]; xlabel="Longitude", ylabel="Latitude", aspect=DataAspect())
hm = heatmap!(ax, prediction, colormap=Reverse(:YlGnBu), colorrange=(0., 1.))
Colorbar(fig[1,2], hm; tellheight=false)
current_figure()
```

uncertainty

```{julia}
function entropy(f)
    p = [f, 1-f]
    return -sum(p .* log2.(p))
end

fig = Figure(; resolution=(900, 400))
ax = Axis(fig[1,1]; xlabel="Longitude", ylabel="Latitude", aspect=DataAspect())
hm = heatmap!(ax, entropy.(prediction), colormap=Reverse(:tokyo), colorrange=(0., 1.))
Colorbar(fig[1,2], hm; tellheight=false)
current_figure()
```

initial tuning

```{julia}
thr = LinRange(0.0, 1.0, 50)
k = 12
C = zeros(ConfusionMatrix, (k, length(thr)))
ty, tX = y[idx], X[idx,:]
folds = kfold(ty, tX; k=k, permute=true)
for (j,fold) in enumerate(folds)
    foldmodel = naivebayes(ty[fold[1]], tX[fold[1],:])
    foldvalid = vec(mapslices(foldmodel, tX[fold[2],:]; dims=2))
    for (i,t) in enumerate(thr)
        C[j,i] = ConfusionMatrix(foldvalid, ty[fold[2]], t)
    end
end
```